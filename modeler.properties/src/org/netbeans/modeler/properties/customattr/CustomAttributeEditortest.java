/**
 * Copyright 2013-2018 Gaurav Gupta
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */
package org.netbeans.modeler.properties.customattr;

import java.awt.event.MouseEvent;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.beans.PropertyEditor;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Vector;
import javax.swing.DefaultListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.table.DefaultTableModel;
import org.openide.explorer.propertysheet.PropertyEnv;

public class CustomAttributeEditortest extends javax.swing.JPanel implements PropertyChangeListener {

    private PropertyEnv env;
    private PropertyEditor editor;

    public CustomAttributeEditortest(Object value, PropertyEditor editor, PropertyEnv env) {
        this.env = env;
        this.editor = editor;
        this.env.setState(PropertyEnv.STATE_NEEDS_VALIDATION);
        this.env.addPropertyChangeListener(this);

        initComponents();

        DefaultListSelectionModel dlsm = (DefaultListSelectionModel) this.jTableAttribute.getSelectionModel();
        dlsm.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                jTablePropertiesListSelectionValueChanged(e);
            }
        });

        if (value != null && value instanceof Map) {
            this.setPropertiesMap((Map) value);
        } else if (value != null && value instanceof List) {
            this.setPropertiesList((List) value);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelFields = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTableAttribute = new javax.swing.JTable();
        jPanelButtons2 = new javax.swing.JPanel();
        jLayeredPane1 = new javax.swing.JLayeredPane();
        jButtonNewProperty = new javax.swing.JButton();
        jButtonModifyProperty = new javax.swing.JButton();
        jButtonDeleteProperty = new javax.swing.JButton();

        jPanelFields.setLayout(new java.awt.BorderLayout());

        jScrollPane3.setPreferredSize(new java.awt.Dimension(32767, 32767));
        jScrollPane3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jScrollPane3MouseClicked(evt);
            }
        });

        jTableAttribute.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Value"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableAttribute.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableAttributeMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(jTableAttribute);

        jPanelFields.add(jScrollPane3, java.awt.BorderLayout.CENTER);

        jPanelButtons2.setMinimumSize(new java.awt.Dimension(100, 10));
        jPanelButtons2.setPreferredSize(new java.awt.Dimension(100, 32));

        jLayeredPane1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jButtonNewProperty.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/netbeans/jbpmn/modeler/widget/properties/resource/icon_plus.png"))); // NOI18N
        jButtonNewProperty.setText(org.openide.util.NbBundle.getMessage(CustomAttributeEditortest.class, "CustomAttributeEditortest.jButtonNewProperty.text")); // NOI18N
        jButtonNewProperty.setToolTipText(org.openide.util.NbBundle.getMessage(CustomAttributeEditortest.class, "CustomAttributeEditortest.jButtonNewProperty.toolTipText")); // NOI18N
        jButtonNewProperty.setActionCommand(org.openide.util.NbBundle.getMessage(CustomAttributeEditortest.class, "CustomAttributeEditortest.jButtonNewProperty.actionCommand")); // NOI18N
        jButtonNewProperty.setMargin(new java.awt.Insets(2, 5, 2, 5));
        jButtonNewProperty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonNewPropertyActionPerformed(evt);
            }
        });

        jButtonModifyProperty.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/netbeans/jbpmn/modeler/widget/properties/resource/edit.png"))); // NOI18N
        jButtonModifyProperty.setText(org.openide.util.NbBundle.getMessage(CustomAttributeEditortest.class, "CustomAttributeEditortest.jButtonModifyProperty.text")); // NOI18N
        jButtonModifyProperty.setToolTipText(org.openide.util.NbBundle.getMessage(CustomAttributeEditortest.class, "CustomAttributeEditortest.jButtonModifyProperty.toolTipText")); // NOI18N
        jButtonModifyProperty.setActionCommand(org.openide.util.NbBundle.getMessage(CustomAttributeEditortest.class, "CustomAttributeEditortest.jButtonModifyProperty.actionCommand")); // NOI18N
        jButtonModifyProperty.setEnabled(false);
        jButtonModifyProperty.setMargin(new java.awt.Insets(2, 5, 2, 5));
        jButtonModifyProperty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonModifyPropertyActionPerformed(evt);
            }
        });

        jButtonDeleteProperty.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/netbeans/jbpmn/modeler/widget/properties/resource/delete.png"))); // NOI18N
        jButtonDeleteProperty.setText(org.openide.util.NbBundle.getMessage(CustomAttributeEditortest.class, "CustomAttributeEditortest.jButtonDeleteProperty.text")); // NOI18N
        jButtonDeleteProperty.setToolTipText(org.openide.util.NbBundle.getMessage(CustomAttributeEditortest.class, "CustomAttributeEditortest.jButtonDeleteProperty.toolTipText")); // NOI18N
        jButtonDeleteProperty.setActionCommand(org.openide.util.NbBundle.getMessage(CustomAttributeEditortest.class, "CustomAttributeEditortest.jButtonDeleteProperty.actionCommand")); // NOI18N
        jButtonDeleteProperty.setEnabled(false);
        jButtonDeleteProperty.setMargin(new java.awt.Insets(2, 5, 2, 5));
        jButtonDeleteProperty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeletePropertyActionPerformed(evt);
            }
        });

        jLayeredPane1.setLayer(jButtonNewProperty, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(jButtonModifyProperty, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(jButtonDeleteProperty, javax.swing.JLayeredPane.DEFAULT_LAYER);

        org.jdesktop.layout.GroupLayout jLayeredPane1Layout = new org.jdesktop.layout.GroupLayout(jLayeredPane1);
        jLayeredPane1.setLayout(jLayeredPane1Layout);
        jLayeredPane1Layout.setHorizontalGroup(
            jLayeredPane1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jLayeredPane1Layout.createSequentialGroup()
                .add(6, 6, 6)
                .add(jButtonNewProperty)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jButtonModifyProperty)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jButtonDeleteProperty)
                .add(6, 6, 6))
        );
        jLayeredPane1Layout.setVerticalGroup(
            jLayeredPane1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jLayeredPane1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                .add(jButtonNewProperty)
                .add(jButtonModifyProperty)
                .add(jButtonDeleteProperty))
        );

        org.jdesktop.layout.GroupLayout jPanelButtons2Layout = new org.jdesktop.layout.GroupLayout(jPanelButtons2);
        jPanelButtons2.setLayout(jPanelButtons2Layout);
        jPanelButtons2Layout.setHorizontalGroup(
            jPanelButtons2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanelButtons2Layout.createSequentialGroup()
                .add(jLayeredPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(0, 245, Short.MAX_VALUE))
        );
        jPanelButtons2Layout.setVerticalGroup(
            jPanelButtons2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanelButtons2Layout.createSequentialGroup()
                .add(jLayeredPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(0, 5, Short.MAX_VALUE))
        );

        jPanelFields.add(jPanelButtons2, java.awt.BorderLayout.NORTH);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(4, 4, 4)
                .add(jPanelFields, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 432, Short.MAX_VALUE)
                .add(4, 4, 4))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(4, 4, 4)
                .add(jPanelFields, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 336, Short.MAX_VALUE)
                .add(4, 4, 4))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jTableAttributeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableAttributeMouseClicked
        if (evt.getClickCount() == 2 && evt.getButton() == MouseEvent.BUTTON1 && jTableAttribute.getSelectedRow() >= 0) {
            jButtonModifyPropertyActionPerformed(new java.awt.event.ActionEvent(jButtonModifyProperty, 0, ""));
        }
    }//GEN-LAST:event_jTableAttributeMouseClicked

    private void jScrollPane3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jScrollPane3MouseClicked
        // Add your handling code here:
    }//GEN-LAST:event_jScrollPane3MouseClicked

    private void jButtonNewPropertyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonNewPropertyActionPerformed
//        Window pWin = SwingUtilities.windowForComponent(this);

        CustomAttributeDialog jrpd = new CustomAttributeDialog(Misc.getMainFrame(), true);
        //JRPropertyDialog jrpd = new JRPropertyDialog(w, true);
        jrpd.setProperties(getPropertiesList());
        jrpd.setVisible(true);

        DefaultTableModel dtm = (DefaultTableModel) jTableAttribute.getModel();
        if (jrpd.getDialogResult() == javax.swing.JOptionPane.OK_OPTION) {

            GenericProperty prop = jrpd.getProperty();
            String val = (String) prop.getValue();
            dtm.addRow(new Object[]{prop, val});
            jTableAttribute.updateUI();
        }
    }//GEN-LAST:event_jButtonNewPropertyActionPerformed

    private void jButtonModifyPropertyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonModifyPropertyActionPerformed
        int index = jTableAttribute.getSelectedRow();
        DefaultTableModel dtm = (DefaultTableModel) jTableAttribute.getModel();

        CustomAttributeDialog attrDialog = new CustomAttributeDialog(Misc.getMainFrame(), true);
        attrDialog.setProperty((GenericProperty) dtm.getValueAt(index, 0));
        attrDialog.setProperties(getPropertiesList());
        attrDialog.setVisible(true);

        if (attrDialog.getDialogResult() == javax.swing.JOptionPane.OK_OPTION) {

            GenericProperty prop = attrDialog.getProperty();
            String val = (String) prop.getValue();

            dtm.setValueAt(prop, index, 0);
            dtm.setValueAt(val, index, 1);
            jTableAttribute.updateUI();
        }
    }//GEN-LAST:event_jButtonModifyPropertyActionPerformed

    private void jButtonDeletePropertyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeletePropertyActionPerformed
        int[] rows = jTableAttribute.getSelectedRows();
        DefaultTableModel dtm = (DefaultTableModel) jTableAttribute.getModel();
        for (int i = rows.length - 1; i >= 0; --i) {
            dtm.removeRow(rows[i]);  //jTableProperties.convertRowIndexToModel(rows[i])
        }
    }//GEN-LAST:event_jButtonDeletePropertyActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonDeleteProperty;
    private javax.swing.JButton jButtonModifyProperty;
    private javax.swing.JButton jButtonNewProperty;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JPanel jPanelButtons2;
    private javax.swing.JPanel jPanelFields;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTableAttribute;
    // End of variables declaration//GEN-END:variables

    public void setPropertiesMap(Map properties) {
        List<GenericProperty> list = new ArrayList<GenericProperty>();
        Iterator<Map.Entry<String, String>> properties_Itr = properties.entrySet().iterator();
        while (properties_Itr.hasNext()) {
            Map.Entry<String, String> entry = properties_Itr.next();
            list.add(new GenericProperty(entry.getKey(), entry.getValue()));
        }
        setPropertiesList(list);
    }

    public Map getPropertiesMap() {
        Map properties = new LinkedHashMap();
        for (GenericProperty prop : getPropertiesList()) {
            properties.put(prop.getKey(), (String) prop.getValue());
        }
        return properties;
    }

    public void setPropertiesList(List<GenericProperty> properties) {
        DefaultTableModel dtm = (DefaultTableModel) jTableAttribute.getModel();
        dtm.setRowCount(0);
        for (GenericProperty prop : properties) {
            String val = (String) prop.getValue();
            Vector row = new Vector();
            row.addElement(prop);
            row.addElement(val);
            dtm.addRow(row);
        }
    }

    public List<GenericProperty> getPropertiesList() {
        List<GenericProperty> props = new ArrayList<GenericProperty>();
        DefaultTableModel dtm = (DefaultTableModel) jTableAttribute.getModel();
        for (int i = 0; i < dtm.getRowCount(); ++i) {
            props.add((GenericProperty) dtm.getValueAt(i, 0));
        }
        return props;
    }

//    /**
//     * @return Returns the property value that is result of the
//     * CustomPropertyEditor.
//     * @exception InvalidStateException when the custom property editor does not
//     * represent valid property value (and thus it should not be set)
//     */
//    private Object getPropertyValue() throws IllegalStateException {
//        return getPropertiesMap();
//    }
    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        if (PropertyEnv.PROP_STATE.equals(evt.getPropertyName()) && evt.getNewValue() == PropertyEnv.STATE_VALID) {
            editor.setValue(getPropertiesMap());
        }
    }

    public void jTablePropertiesListSelectionValueChanged(javax.swing.event.ListSelectionEvent e) {
        if (this.jTableAttribute.getSelectedRowCount() <= 0) {
            this.jButtonModifyProperty.setEnabled(false);
            this.jButtonDeleteProperty.setEnabled(false);
        } else {
            this.jButtonModifyProperty.setEnabled(true);
            this.jButtonDeleteProperty.setEnabled(true);
        }
    }
}
